// Это скрипт искуственного интелекта управляющего битой противника
using UnityEngine;
using System.Collections;


public class ArtificialIntelligence : MonoBehaviour 
{
	public bool Think;					// Эта переменная говорит будет ли искуственный интеллект думать или нет
	GameObject GameM;					// Это переменная для игрового объекта GameManager
	Puck Pc;							// Ссылка на объект класса Puck
	Keeper Kep;							// Переменная для скрипта "Хранитель"
	GameManager GM;						// Переменная для скрипта GameManager
	ObjectScript OS;					// Переменная для скрипта ObjectScript этого объекта
	Vector3 StandPoint;					// Эта переменная указывает место ожидания биты управляемой компьютером
	Vector3 SafetyPoint;				// Эта переменная указывает место в котором надо стоять шайбе компьютера чтобы пассивно отбить шайбу
	byte PuckIsStand;					// Считает сколько раз старая позиция шайбы была равна новой (То есть стоит она или медленно движеться)
//	bool MySide;						// Переменная говорит на стороне компьютера или живого игрока находиться шайба
	bool ItMovesTomMe;					// Переменная говорит последнее движение шайбы было зафиксированно на ворота компьютера?
	bool ReachedSafetyPoint = false;	// Переменная говорит достиг ли компьютер SafetyPoint
	Vector3 Dirrection;					// Через эту переменную мы задаём направление и скорость движения биты компьютера
	Rigidbody TBR;						// (ThisBatRigitbody) Переменная для объекта класса Rigidbody этой биты
	Rigidbody PR;						// (PuckRigitbody) Переменная для объекта класса Rigidbody
	bool InningWas;						// Переменная говорит была ли выполнена подача
	RaycastHit Hit;						// Обозначаем переменную куда вернёться точка удара луча и коллайдер об который ударилься луч
	Ray ray;							// Создаём объект класса луч


	void Awake()											// Вызываеться при пробуждении
	{
		GameM = GameObject.Find("GameManager");				// Ложим объект GameManager в переменную GameM
		GM = GameM.GetComponent<GameManager>();				// Ложим в переменную GM скрипт GameManager
		Kep = GameM.GetComponent<Keeper>();					// Находим компонент "Keeper" и ложим его в переменную Kep
		TBR = GetComponent<Rigidbody>();					// Ложим в переменную TBR Rigidbody биты на которой висит этот скрипт
		OS = GetComponent<ObjectScript>();					// В переменную ObjectScript загружаем ObjectScript
		GM.StartLevelEvent += StartLevel;					// В список события StartLevelEvent добавляем метод StartLevel
		GM.GoalEvent += Goal;								// Подписываем метод гол на событие GoalEvent
	}
	
	
	void Update () 										
	{
		if(Think)										// Если переменная думать равна "правда"
			if(InningWas)								// И если подача была выполненна или она вовсе не нужна
				WhatToDo();								// Вызываем метод решающий что делать
	}
	
	
	void FixedUpdate()					
	{
		if(Think)										// Если переменная Думать равна true
		{
			TBR.AddForce(Dirrection);					// То задаём силу и направление указанное в переменной Dirrection
		}
	}
	

	IEnumerator Inning()																// Этот метод нужен для подачи в начале игры если выпала подача компьютера				
	{
		Vector3 BackVector;																// Направление нужное чтобы отдалиться от шайбы
		BackVector = gameObject.transform.position - GM.Puck.transform.position;		// Вычисляем направление в котором нужно двигаться
		BackVector.Normalize();															// Нормализуем вектор														
		Dirrection = BackVector * OS.Force;												// Умножаем вектор TemporaryVector на силу этой биты и присваиваем это значение вектору Dirrection		
		yield return new WaitForSeconds(1.5f);											// Ждём 1.5 секунды заменить время на рассояние
		Dirrection -= Dirrection * 2;													// Реверсируем направление шайбы чтобы выполнить удар
		yield return new WaitForSeconds(2.5f);											// Ждём 2 секунды заменить на соприкосновение с шайбой
		InningWas = true;																// Ставим что подача выполненна
	}
	
	
	void WhatToDo()		// Этот метод вызываеться каждый кадр он решает что делать встать на StandPoint, встать поперёк направлению шайбы или идти на неё
	{
		Vector3 Pos = GM.Puck.transform.position;									// Ложим в позицию центра луча текущее местоположение шайбы
		Vector3 Dir = PR.velocity;													// Ложим вектор направления шайбы и ложим в переменную Dir
		Debug.DrawRay(GM.Puck.transform.position, PR.velocity * 2, Color.red);		// Рисуем вектор для отладки

//		if(Kep.RightSide == true & GM.Puck.transform.position.x < 0 || Kep.RightSide == false & GM.Puck.transform.position.x > 0)	// Если шайба на стороне компьютера
//			MySide = true;															// Указываем что шайба на стороне компьютера
//		else MySide = false; 														// Иначе ставим что шайба не на стороне компьютера

		for(byte a = 0; a<3; a++)													// Завершаем цикл если он повторилься 3 раза							
		{
			if(Physics.SphereCast(new Ray(Pos, Dir), Pc.Radius, out Hit))			// Мы пускаем луч из PosRay в направлении Dir если он обо чтото удариться																
			{					
				if(Hit.collider.tag == "Gate")										// Если луч ударилься об коллайдер ворот
				{
					if(Hit.collider.GetComponent<GateTrigger>().PlayerGate == 2)	// Если луч ударилься об коллайдер ворот компьютера
					{
						TakeSafetyPosition(Dir);									// Вызываем метод просчитывающий путь биты к SafetyPosition
																					
					}																
					else 															// Иначе если луч ударилься об коллайдер ворот живого игрока
					{
						TakeStandPosition();										// Вызываем метод просчитывающий путь биты к StandPoint
					}
				}
				else 																	// Иначе если луч врезалися в другой коллайдер
				{
					ray = new Ray(Hit.point, Dir - (Dir*2));							// Задаём лучу координаты где луч хит врезалься и направление обратное тому что у него было
					Pos = ray.GetPoint(Pc.Radius);										// Высчитываем где будет центр шайбы когда она сюда врежеться и заносим его в переменную Pos
					Dir = Vector3.Reflect(Dir, Hit.normal);								// Высчитываем направление луча после отражения и присваиваем переменной Dir	

					TakeStandPosition();												// Вызываем метод просчитывающий путь биты к StandPoint
				}										
			}
		}
	}
	
	
	void TakeStandPosition()																// Этот метод вызываеться когда нужно встать на стартовую точку и отбить биту которая проходит рядом
	{
		Vector3 Temporary = Vector3.Normalize(StandPoint - transform.position);				// Обновляем вектор движения в точку ожидания, нормализуем этот вектор и присваиваем вектору Temporary
		// Если от шайбы до биты расстояние менше 2х метров и шайба двигаеться не от биты (вычисляем сравнением векторов, первый это вектор движения шайбы второй это вектор от биты до шайбы)
		if(Vector3.Magnitude(StandPoint - transform.position) > 0.5f)						// Если от биты до StandPoint расстояние больше чем пол метра				
		{
			Dirrection = Temporary * OS.Force;												// То вектор Temporary умножаем на силу биты и присваиваем как новый вектор движения
		}
		else 	 																			// Иначе если от StandPoint до биты расстояние меньше или равно пол метра
		{
			// То вектор движения биты умножаем на силу биты делённую умноженную на расстояние и присваиваем как новый вектор движения
			Dirrection = Temporary * (OS.Force * (Vector3.Magnitude(StandPoint - transform.position)));
		}
	}


	void TakeSafetyPosition(Vector3 Dir)											// Этот метод вызываеться когда нужно встать на точку преграждающую путь голу и пойти на шайбу чтобы отбить её
	{
		ray = new Ray(Hit.point, Dir - (Dir*2));									// Задаём лучу координаты где луч Hit врезалься и направление обратное тому что у него было
		SafetyPoint = ray.GetPoint(StandPoint.x - Hit.point.x);						// Пускаем луч в обратном направлении до StandLine чтобы узнать SafetyPoint
		Vector3 Temporary = Vector3.Normalize(SafetyPoint - transform.position);	// Обновляем вектор движения в "Безопасную" точку, нормализуем этот вектор и присваиваем вектору Temporary
		if(!ReachedSafetyPoint)														// Если быита не достигла SafetyPoint
		{
			if(Vector3.Magnitude(SafetyPoint - transform.position) > 0.5f)			// Если от биты до SafetyPoint расстояние больше чем пол метра
			{
				Dirrection = Temporary * OS.Force;									// То вектор Temporary умножаем на силу биты и присваиваем как новый вектор движения
			}
			else 	 																// Иначе если от StandPoint до биты расстояние меньше или равно пол метра
			{
				// То вектор движения биты умножаем на силу биты делённую умноженную на расстояние и присваиваем как новый вектор движения
				Dirrection = Temporary * (OS.Force * (Vector3.Magnitude(SafetyPoint - transform.position)));
			}
		}
	}
	

	bool IHaveThePuck()													// Метод вычисляет шайба у компьютера или у игрока если у компьютера возвращает правда 
	{
		bool Ihave = false;												// Хранит ответ на вопрос (шайба у компьютера ?) по умолчанию ответ нет
		// Если при старте игры расстояние между битой компьютера и шайбой больше меньше 2 метров
		if(Vector2.Distance(new Vector2(transform.position.x, transform.position.y), new Vector2(GM.Puck.transform.position.x, GM.Puck.transform.position.y))< 2)
		{
			Ihave = true;												// Указываем переменной что бита у компьютера
		}
		return Ihave;													// Возвращаем результат переменной Ihave
	}
	
	
	//-------------------------------------------------------------------------------------Событие старта уровня--------------------------------------------------------------------------------------------------------------------------
	
	
	void StartLevel()											// Этот метод вызываеться при старте уровня
	{
		Think = true;											// Ставим переменную PM.AI.Play равной правда
		float d = GetComponent<MeshRenderer>().bounds.size.x;	// Получаем диаметр биты компьютерного игрока
		if(Kep.RightSide == true)								// Если переменная "Правая сторона" правда
			StandPoint.x = GM.SPP2.x + (d/2) + 0.2f;			// То StandPoint это позиция второго игрока + его радиус + условное расстояние
		else 													// Иначе если переменная "Правая сторона" ложь
			StandPoint.x = GM.SPP2.x - (d/2) - 0.2f;			// То StandPoint это позиция второго игрока - его радиус - условное расстояние
		StartCoroutine(AfterStart());							// Вызываем коронтину "После старта" 						
	}
	
	
	IEnumerator AfterStart()
	{
		yield return new WaitForSeconds(0.1f);					// Ждём 1 секунду
		if(IHaveThePuck())										// Вычисляем. Шайба у компьютера? Если метод вернёт правда
			StartCoroutine(Inning());							// Вызываем метод запускающий подачу
		else 													// Если вернёт ложь
		{
			InningWas = true;									// Сообщаем что подача была выполненна
		}
		PR = GM.Puck.GetComponent<Rigidbody>();					// Получаем объект класса Rigitbody и ложим в переменную PR
		Pc = GM.Puck.GetComponent<Puck>();						// Получаем объект класса Puck и ложим в переменную Pc
	}
	
	//-----------------------------------------------------------------------------------------Событие гола--------------------------------------------------------------------------------------------------------------------------
	
	void Goal()									// Этот метод вызываеться один раз во время гола
	{
		Think = false;							// Приказываем компьютеру остановиться
		StartCoroutine(AfterGoal());			// Вызываем коронтину AfterGoal					
	}
	
	
	IEnumerator AfterGoal()						// Этот метод вызываеться после выполнения метода гол
	{
		yield return new WaitForSeconds(4); 	// Ждём 4 секунды
		transform.position = GM.SPP2;			// Ставим биту управляемую компьютером на позицию просчитанную для второго игрока
		yield return new WaitForSeconds(1);		// Ждём 1 секунду
		Think = true;							// Приказываем компьютеру возобновить игру
	}
	
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	
	void OnDisable()
	{
		GM.GoalEvent -= Goal;					// Отписываем метод Goal от события GoalEvent
		GM.StartLevelEvent -= StartLevel;		// Отписываем метод StartLevel от события StartLevelEvent
	}
}